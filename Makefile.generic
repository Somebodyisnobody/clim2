# $fiHeader: Makefile.generic,v 1.31 1995/10/17 05:00:57 colin Exp $
#
#  Makefile.generic for CLIM 2.0
#

all: compile cat clim

trained:
	(${make} all train ; ${make} clim)

FORCE:

compile: FORCE $(PRODUCT-OBJS)
	(eval '$(SET_LIBRARY_PATH)' ; \
	$(ECHO) " \
	(progn \
	  (setf (logical-pathname-translations \"clim2\") \
	    \`((\";**;*.*\" ,(current-directory)))) \
	  #+ignore (load-logical-pathname-translations \"clim2\") \
	  (setq sys::*libtk-pathname* \"$(TKLIB)\") \
	  (setq sys::*libxt-pathname* \"$(XTLIB)\") \
	  (setq sys::*libx11-pathname* \"$(XLIB)\") \
	  (setq sys::*libwnn-pathname* \"$(WNNLIB)\") \
	  (load \"misc/compile-1.lisp\") \
	  (proclaim '(optimize (speed $(SPEED)) (debug $(DEBUG)) (safety $(SAFETY)))) \
	  (let ((*compile-print $(COMPILE_PRINT)) \
		(*compile-verbose* t) \
		(excl:*redefinition-warnings* t) \
		(excl:*record-source-file-info* $(RECORD_SOURCE_FILE_INFO)) \
		(excl:*load-source-file-info* $(LOAD_SOURCE_FILE_INFO)) \
		(excl:*record-xref-info* $(RECORD-XREF-INFO)) \
		(excl:*load-xref-info* $(LOAD_XREF_INFO))) \
	    (compile-it '$(SYSTEM))))" \
	| $(CL) $(CLOPTS))

# Concatenation

cat: $(PRODUCT-FASLS)

climg.fasl: $(GENERIC-FASLS)
	$(CAT) $(GENERIC-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climg.fasl
	ls -lt climg.fasl >> Clim-sizes.n
	ls -lt climg.fasl

climdemo.fasl: $(DEMO-FASLS)
	$(CAT) $(DEMO-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climdemo.fasl
	ls -lt climdemo.fasl >> Clim-sizes.n
	ls -lt climdemo.fasl

climgg.fasl: $(HOMEGROWN-GADGET-FASLS)
	$(CAT) $(HOMEGROWN-GADGET-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climgg.fasl
	ls -lt climgg.fasl >> Clim-sizes.n
	ls -lt climgg.fasl

clim-debug.fasl: $(DEBUG-FASLS)
	$(CAT) $(DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debug.fasl
	ls -lt clim-debug.fasl >> Clim-sizes.n
	ls -lt clim-debug.fasl

climxm.fasl: $(XM-FASLS)
	$(CAT) $(XM-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climxm.fasl
	ls -lt climxm.fasl >> Clim-sizes.n
	ls -lt climxm.fasl

clim-debugxm.fasl: $(XM-DEBUG-FASLS)
	$(CAT) $(XM-DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debugxm.fasl
	ls -lt clim-debugxm.fasl >> Clim-sizes.n
	ls -lt clim-debugxm.fasl

climol.fasl: $(OL-FASLS)
	$(CAT) $(OL-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climol.fasl
	ls -lt climol.fasl >> Clim-sizes.n
	ls -lt climol.fasl

clim-debugol.fasl: $(OL-DEBUG-FASLS)
	$(CAT) $(OL-DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debugol.fasl
	ls -lt clim-debugol.fasl >> Clim-sizes.n
	ls -lt clim-debugol.fasl

climwnn.fasl: $(WNN-FASLS)
	$(CAT) $(WNN-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climwnn.fasl
	ls -lt climwnn.fasl >> Clim-sizes.n
	ls -lt climwnn.fasl

clim-debugwnn.fasl: $(WNN-DEBUG-FASLS)
	$(CAT) $(WNN-DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debugwnn.fasl
	ls -lt clim-debugwnn.fasl >> Clim-sizes.n
	ls -lt clim-debugwnn.fasl

climps.fasl: $(POSTSCRIPT-FASLS)
	$(CAT) $(POSTSCRIPT-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climps.fasl

climhpgl.fasl: $(HPGL-FASLS)
	$(CAT) $(HPGL-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climhpgl.fasl

clim1compat.fasl: $(CLIM1COMPAT-FASLS)
	$(CAT) $(CLIM1COMPAT-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim1compat.fasl
	ls -lt clim1compat.fasl >> Clim-sizes.n
	ls -lt clim1compat.fasl

# Building (loading and dumping)

clim: FORCE $(PRODUCT-OBJS)
	-$(RM) -f $(CLIM)
	(eval '$(SET_LIBRARY_PATH)' ; \
	$(ECHO) " \
	(progn \
	  (setf (logical-pathname-translations \"clim2\") \
	    \`((\";**;*.*\" ,(current-directory)))) \
	  #+ignore (load-logical-pathname-translations \"clim2\") \
	  (setq sys::*libtk-pathname* \"$(TKLIB)\") \
	  (setq sys::*libxt-pathname* \"$(XTLIB)\") \
	  (setq sys::*libx11-pathname* \"$(XLIB)\") \
	  (setq sys::*libwnn-pathname* \"$(WNNLIB)\") \
	  (load \"misc/dev-load-1.lisp\") \
	  (load-it '$(SYSTEM)) \
	  (setq sys::*clim-dump-name* \"$(TMP)/clim.temp_`whoami`\") \
	  (load \"misc/dump.lisp\"))" \
	| $(CL) $(CLOPTS))
	$(MV) $(TMP)/clim.temp_`whoami` $(CLIM)
	ls -lLt $(CLIM) >> Clim-sizes.n
	size $(CLIM) >> Clim-sizes.n
	ls -lLt $(CLIM)
	echo $(SYSTEM) built!!!!	

# Training

train: FORCE
	(eval '$(SET_LIBRARY_PATH)' ; \
	$(ECHO) " \
	(progn \
	  (load \"misc/train.lisp\") \
	  (train-clim :frame-tests $(FRAME_TESTS) :train-times $(TRAIN_TIMES) \
		:benchmarkp $(TRAIN_BM) :profilep $(TRAIN_PROFILEP) \
		:compile $(TRAIN_COMPILE) :psview $(PSVIEW) \
		:hpglview $(HPGLVIEW)))" \
	| $(CLIM) $(CLOPTS))
	echo $(SYSTEM) trained!!!!	

# the following two rules are used by make-dist so that we don't have 
# to build a slim image to run the test suite

load-train: FORCE
	(eval '$(SET_LIBRARY_PATH)' ; \
	$(ECHO) " \
	  (setf (logical-pathname-translations \"clim2\") \
	    \`((\";**;*.*\" ,(current-directory)))) \
	  #+ignore (load-logical-pathname-translations \"clim2\") \
	  (setq sys::*libtk-pathname* \"$(TKLIB)\") \
	  (setq sys::*libxt-pathname* \"$(XTLIB)\") \
	  (setq sys::*libx11-pathname* \"$(XLIB)\") \
	  (setq sys::*libwnn-pathname* \"$(WNNLIB)\") \
	  (load \"misc/dev-load-1.lisp\") \
	  (load-it '$(SYSTEM)) \
	  (load \"misc/train.lisp\") \
	  (train-clim :frame-tests $(FRAME_TESTS) :train-times $(TRAIN_TIMES) \
		:benchmarkp $(TRAIN_BM) :profilep $(TRAIN_PROFILEP) \
		:compile $(TRAIN_COMPILE) :psview $(PSVIEW) \
		:hpglview $(HPGLVIEW) :report-file \"$(REPORT_FILE)\") \
	  (clim-test::generate-pretty-test-report :file \"$(REPORT_FILE)\")" \
	| $(CL) $(CLOPTS))

generate_test_report: FORCE
	$(ECHO) " \
	(clim-test::generate-pretty-test-report :file \"$(REPORT_FILE)\")" \
	| $(CLIM) $(CLOPTS)

profile: FORCE
	$(ECHO) " \
	(clim-user::run-profile-clim-tests)" \
	| $(CLIM) $(CLOPTS)

benchmark: FORCE
	$(ECHO) " \
	(clim-test::benchmark-clim $(BENCHMARK_FILE))" \
	| $(CLIM) $(CLOPTS)

testps: FORCE
	$(ECHO) " \
	(load \"test/postscript-tests.lisp\") \
	(clim-user::run-postscript-tests :output $(PSVIEW))" \
	| $(CLIM) $(CLOPTS)

# Misc

cleanobjs: 
	rm -f *.o

clean:
	find . -name '*.fasl' -print | xargs rm -f
	rm -f *.o *.so slim slim.ol \
	  	stub-motif.c stub-olit.c stub-xt.c stub-x.c stub-wnn.c
	rm -f *.z *.Z *.gz *.ilt *.out

clean-notes:
	cd notes ; find . -name '*.lisp' -print | xargs rm -f

tags:
	$(TAGS) $(ALL_SRC)

wc:
	wc $(ALL_SRC)

################## make-dist stuff

echo_XTLIB:
	@echo $(XTLIB)

echo_XLIB:
	@echo $(XLIB)

echo_TKLIB:
	@echo $(TKLIB)

echo_WNNLIB:
	@echo $(WNNLIB)

makeclimfasls: compile cat

install_obj:
	cp $(PRODUCT-OBJS) $(DEST)
	
install_clim: install_obj
	cp $(PRODUCT-FASLS) $(DEST)

echo_src_files:
	@echo $(PRODUCT_SRC_FILES)

makeclimobjs: $(PRODUCT-OBJS)

################## Lower level Makefile stuff

# re: STATIC-WNN-OBJS + STATIC-WNN-OBJS-WITH-PWD
# I'm sorry - but for the moment I can't think of a better way to do this

xm-dcl	: stub-x.o $(STATIC-WNN-OBJS) stub-xt.o stub-motif.o \
		 xlibsupport.o xtsupport.o xmsupport.o
	cd $(CL_SRC) ; /bin/mv ucl ucl.climsave ; $(SAVEEXP) ;\
	make initial_oldspace=$(OLDSPACE) oldspace=$(OLDSPACE) \
		newspace=$(NEWSPACE) premallocs=$(PREMALLOCS) stubs=$(stubs) \
		user_objects='$(PWD)/stub-x.o $(STATIC-WNN-OBJS-WITH-PWD) $(PWD)/stub-xt.o \
		$(PWD)/stub-motif.o $(PWD)/xlibsupport.o $(PWD)/xmsupport.o \
		$(PWD)/xtsupport.o $(CL_SRC)/code/excldep.o $(CL_SRC)/code/socket.o \
		$(TKLIB) $(XTLIB) $(XLIB) $(WNNLIB)' dcl ;\
	/bin/mv ucl.climsave ucl; $(RESTEXP)

ucl.clim: stub-x.o $(STATIC-WNN-OBJS) stub-xt.o stub-motif.o \
		 xlibsupport.o xtsupport.o xmsupport.o
	cd $(CL_SRC) ; /bin/mv ucl ucl.climsave ;\
	/bin/mv dcl dcl.climsave ; $(SAVEEXP) ;\
	make stubs=$(stubs) \
		user_objects=' \
		$(PWD)/stub-x.o $(STATIC-WNN-OBJS-WITH-PWD) $(PWD)/stub-xt.o\
		$(PWD)/stub-motif.o \
		$(PWD)/xlibsupport.o $(PWD)/xmsupport.o $(PWD)/xtsupport.o \
		$(TKLIB) $(XTLIB) $(XLIB) $(WNNLIB) $(MOTIFXTRAS)' ucl ;\
	/bin/mv ucl ucl.clim ; $(RESTEXP) ; /bin/mv ucl.climsave ucl ; \
	/bin/mv dcl.climsave dcl

################## End of make-dist stuff

include Makefile.cobjs
