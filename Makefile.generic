# $Header: /repo/cvs.copy/clim2/Makefile.generic,v 1.44 1998/02/04 22:22:19 layer Exp $
#
#  Makefile.generic for CLIM 2.0
#

all: compile cat clim

trained:
	(${make} all train ; ${make} clim)

FORCE:

compile: FORCE $(PRODUCT-OBJS) $(ICS-PRODUCT-OBJS)
	(eval '$(SET_LIBRARY_PATH)' ; \
	ALLEGRO_CL_HOME=$(CL_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(progn \
	  (push (merge-pathnames (current-directory) \"hosts.cl\") \
	    (logical-pathname-translations-database-pathnames)) \
	  (setq sys::*libtk-pathname* \"$(TKLIB)\") \
	  (setq sys::*libxt-pathname* \"$(XTLIB)\") \
	  (setq sys::*libx11-pathname* \"$(XLIB)\") \
	  (setq sys::*libwnn-pathname* \"$(WNNLIB)\") \
	  (load \"misc/compile-1.lisp\") \
	  (proclaim '(optimize (speed $(SPEED)) (debug $(DEBUG)) (safety $(SAFETY)))) \
	  (let ((*compile-print* $(compile_print)) \
		(*compile-verbose* $(compile_verbose)) \
		(excl:*redefinition-warnings* $(redef_warning)) \
		(excl:*record-source-file-info* $(RECORD_SOURCE_FILE_INFO)) \
		(comp:save-local-names-switch $(SAVE_LOCAL_NAMES)) \
		(excl:*load-local-names-info* $(LOAD_LOCAL_NAMES_INFO)) \
		(excl:*load-source-file-info* $(LOAD_SOURCE_FILE_INFO)) \
		(excl:*record-xref-info* $(RECORD-XREF-INFO)) \
		(excl:*load-xref-info* $(LOAD_XREF_INFO))) \
	    (setf (sys:gsgc-switch :print) $(gc_print)) \
	    (compile-it '$(SYSTEM))))" \
	| $(CL) $(CLOPTS))

# Concatenation

cat: $(PRODUCT-FASLS) $(ICS-PRODUCT-FASLS)

climg.fasl: $(GENERIC-FASLS)
	$(CAT) $(GENERIC-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climg.fasl
	ls -lt climg.fasl >> Clim-sizes.n
	ls -lt climg.fasl

climdemo.fasl: $(DEMO-FASLS)
	$(CAT) $(DEMO-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climdemo.fasl
	ls -lt climdemo.fasl >> Clim-sizes.n
	ls -lt climdemo.fasl

climgg.fasl: $(HOMEGROWN-GADGET-FASLS)
	$(CAT) $(HOMEGROWN-GADGET-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climgg.fasl
	ls -lt climgg.fasl >> Clim-sizes.n
	ls -lt climgg.fasl

clim-debug.fasl: $(DEBUG-FASLS)
	$(CAT) $(DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debug.fasl
	ls -lt clim-debug.fasl >> Clim-sizes.n
	ls -lt clim-debug.fasl

climxm.fasl: $(XM-FASLS)
	$(CAT) $(XM-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climxm.fasl
	ls -lt climxm.fasl >> Clim-sizes.n
	ls -lt climxm.fasl

clim-debugxm.fasl: $(XM-DEBUG-FASLS)
	$(CAT) $(XM-DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debugxm.fasl
	ls -lt clim-debugxm.fasl >> Clim-sizes.n
	ls -lt clim-debugxm.fasl

climol.fasl: $(OL-FASLS)
	$(CAT) $(OL-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climol.fasl
	ls -lt climol.fasl >> Clim-sizes.n
	ls -lt climol.fasl

clim-debugol.fasl: $(OL-DEBUG-FASLS)
	$(CAT) $(OL-DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debugol.fasl
	ls -lt clim-debugol.fasl >> Clim-sizes.n
	ls -lt clim-debugol.fasl

climwnn.fasl: $(WNN-FASLS)
	$(CAT) $(WNN-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climwnn.fasl
	ls -lt climwnn.fasl >> Clim-sizes.n
	ls -lt climwnn.fasl

clim-debugwnn.fasl: $(WNN-DEBUG-FASLS)
	$(CAT) $(WNN-DEBUG-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim-debugwnn.fasl
	ls -lt clim-debugwnn.fasl >> Clim-sizes.n
	ls -lt clim-debugwnn.fasl

climps.fasl: $(POSTSCRIPT-FASLS)
	$(CAT) $(POSTSCRIPT-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climps.fasl

climhpgl.fasl: $(HPGL-FASLS)
	$(CAT) $(HPGL-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` climhpgl.fasl

clim1compat.fasl: $(CLIM1COMPAT-FASLS)
	$(CAT) $(CLIM1COMPAT-FASLS) > $(TMP)/clim.fasl_`whoami`
	$(MV) $(TMP)/clim.fasl_`whoami` clim1compat.fasl
	ls -lt clim1compat.fasl >> Clim-sizes.n
	ls -lt clim1compat.fasl

# Building (loading and dumping)

$(CLIM): FORCE $(PRODUCT-OBJS) $(ICS-PRODUCT-OBJS)
	-$(RM) -f $(CLIM)
	(eval '$(SET_LIBRARY_PATH)' ; \
	ALLEGRO_CL_HOME=$(CL_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(progn \
	 (generate-application \
	   \"$(CLIM)\" \"./\" \
	   nil \
	   :pre-load-form \
	   (quote \
	     (progn \
	       (push (merge-pathnames (current-directory) \"hosts.cl\") \
		     (logical-pathname-translations-database-pathnames)) \
	       (setq sys::*libtk-pathname* \"$(TKLIB)\") \
	       (setq sys::*libxt-pathname* \"$(XTLIB)\") \
	       (setq sys::*libx11-pathname* \"$(XLIB)\") \
	       (setq sys::*libwnn-pathname* \"$(WNNLIB)\") \
	       (load \"misc/dev-load-1.lisp\") \
	       (load-it '$(SYSTEM)))) \
	   :image-only t \
	   :purify nil \
	   :shlib-warning nil \
	   :libfasl-warning nil \
	   :record-source-file-info t :load-source-file-info t \
	   :record-xref-info t :load-xref-info t \
	   :discard-local-name-info t \
	   :discard-source-file-info t \
	   :discard-xref-info t) \
	 (exit 0))" | $(CL) $(CLOPTS))
	@ls -lLt $(CLIM) >> Clim-sizes.n
	@ls -lLt $(CLIM)
	@echo $(SYSTEM) built!!!!	

# Training

train: FORCE
	(eval '$(SET_LIBRARY_PATH)' ; \
	ALLEGRO_CL_HOME=$(CLIM_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(progn \
	  (load \"misc/train.lisp\") \
	  (train-clim :frame-tests $(FRAME_TESTS) :train-times $(TRAIN_TIMES) \
		:benchmarkp $(TRAIN_BM) :profilep $(TRAIN_PROFILEP) \
		:compile $(TRAIN_COMPILE) :psview $(PSVIEW) \
		:hpglview $(HPGLVIEW)))" \
	| $(LISP) -I $(CLIM) $(CLOPTS))
	echo $(SYSTEM) trained!!!!	

# the following two rules are used by make-dist so that we don't have 
# to build a slim image to run the test suite

load-train: FORCE
	(eval '$(SET_LIBRARY_PATH)' ; \
	ALLEGRO_CL_HOME=$(CL_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	  (push (merge-pathnames (current-directory) \"hosts.cl\") \
	    (logical-pathname-translations-database-pathnames)) \
	  (setq sys::*libtk-pathname* \"$(TKLIB)\") \
	  (setq sys::*libxt-pathname* \"$(XTLIB)\") \
	  (setq sys::*libx11-pathname* \"$(XLIB)\") \
	  (setq sys::*libwnn-pathname* \"$(WNNLIB)\") \
	  (load \"misc/dev-load-1.lisp\") \
	  (load-it '$(SYSTEM)) \
	  (load \"misc/train.lisp\") \
	  (train-clim :frame-tests $(FRAME_TESTS) :train-times $(TRAIN_TIMES) \
		:benchmarkp $(TRAIN_BM) :profilep $(TRAIN_PROFILEP) \
		:compile $(TRAIN_COMPILE) :psview $(PSVIEW) \
		:hpglview $(HPGLVIEW) :report-file \"$(REPORT_FILE)\") \
	  (clim-test::generate-pretty-test-report :file \"$(REPORT_FILE)\")" \
	| $(LISP) -I $(CLIM) $(CLOPTS))

generate_test_report: FORCE
	(ALLEGRO_CL_HOME=$(CLIM_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(clim-test::generate-pretty-test-report :file \"$(REPORT_FILE)\")" \
	| $(LISP) -I $(CLIM) $(CLOPTS))

profile: FORCE
	(ALLEGRO_CL_HOME=$(CLIM_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(clim-user::run-profile-clim-tests)" \
	| $(LISP) -I $(CLIM) $(CLOPTS))

benchmark: FORCE
	(ALLEGRO_CL_HOME=$(CLIM_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(clim-test::benchmark-clim $(BENCHMARK_FILE))" \
	| $(LISP) -I $(CLIM) $(CLOPTS))

testps: FORCE
	(ALLEGRO_CL_HOME=$(CLIM_HOME) ; export ALLEGRO_CL_HOME ; \
	$(ECHO) " \
	(load \"test/postscript-tests.lisp\") \
	(clim-user::run-postscript-tests :output $(PSVIEW))" \
	| $(LISP) -I $(CLIM) $(CLOPTS))

# Misc

cleanobjs: 
	rm -f *.o

clean:
	find . -name '*.fasl' -print | xargs rm -f
	rm -f *.o *.$(SHARED_EXT) *.a slim \
	  	stub-motif.c stub-olit.c stub-xt.c stub-x.c stub-wnn.c
	rm -f *.z *.Z *.gz *.ilt *.out

clean-notes:
	cd notes ; find . -name '*.lisp' -print | xargs rm -f

tags:
	$(TAGS) $(ALL_SRC)

wc:
	wc $(ALL_SRC)

################## make-dist stuff

echo_XTLIB:
	@echo $(XTLIB)

echo_XLIB:
	@echo $(XLIB)

echo_TKLIB:
	@echo $(TKLIB)

echo_WNNLIB:
	@echo $(WNNLIB)

makeclimobjs: $(PRODUCT-OBJS) $(ICS-PRODUCT-OBJS)

install_obj:
	cp $(PRODUCT-OBJS) $(ICS-PRODUCT-OBJS) $(DEST)

makeclimfasls: compile cat

install_clim: install_obj
	cp $(PRODUCT-FASLS) $(ICS-PRODUCT-FASLS) $(DEST)

echo_src_files:
	@echo $(PRODUCT_SRC_FILES)


################## Lower level make-dist stuff

xm-dcl	: stub-x.o stub-xt.o stub-motif.o \
		 xlibsupport.o xtsupport.o xmsupport.o
	cd $(CL_SRC) ; \
	/bin/mv dcl dcl.climsave ; /bin/mv ucl ucl.climsave ; $(SAVEEXP) ; \
	make initial_oldspace=$(OLDSPACE) oldspace=$(OLDSPACE) \
		newspace=$(NEWSPACE) premallocs=$(PREMALLOCS) stubs=$(stubs) \
		user_objects='$(PWD)/stub-x.o $(PWD)/stub-xt.o $(PWD)/stub-motif.o \
		$(PWD)/xlibsupport.o $(PWD)/xmsupport.o $(PWD)/xtsupport.o \
		$(CL_SRC)/code/excldep.o $(CL_SRC)/code/socket.o \
		$(TKLIB) $(XTLIB) $(XLIB) $(MOTIFXTRAS)' dcl ;\
	/bin/mv dcl xm-dcl ; /bin/mv ucl ucl.clim ;\
	/bin/mv dcl.climsave dcl ; /bin/mv ucl.climsave ucl; $(RESTEXP)

xm-dcli	: stub-x.o stub-xt.o stub-motif.o stub-wnn.o \
		 xlibsupport.o xtsupport.o xmsupport.o $(WNNLIB)
	cd $(CL_SRC) ; \
	/bin/mv dcli dcli.climsave ; /bin/mv ucli ucli.climsave ; $(SAVEEXPI) ; \
	make initial_oldspace=$(OLDSPACE) oldspace=$(OLDSPACE) \
		newspace=$(NEWSPACE) premallocs=$(PREMALLOCS) stubs=$(stubs) \
		user_objects='$(PWD)/stub-x.o $(PWD)/stub-xt.o $(PWD)/stub-motif.o \
		$(PWD)/stub-wnn.o \
		$(PWD)/xlibsupport.o $(PWD)/xmsupport.o $(PWD)/xtsupport.o \
		$(CL_SRC)/code/excldep.o $(CL_SRC)/code/socket.o \
		$(TKLIB) $(XTLIB) $(XLIB) $(PWD)/$(WNNLIB) $(MOTIFXTRAS)' dcli ;\
	/bin/mv dcli xm-dcli ; /bin/mv ucli ucli.clim ;\
	/bin/mv dcli.climsave dcli ; /bin/mv ucli.climsave ucli; $(RESTEXPI)

################## End of make-dist stuff

include Makefile.cobjs

include Makefile.wnn
